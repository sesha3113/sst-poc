import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var y=Object.defineProperty;var a=(o,e)=>y(o,"name",{value:e,configurable:!0});import{createRequire as w}from"module";function t(o,...e){console.log("[provider-framework]",o,...e.map(s=>typeof s=="object"?JSON.stringify(s,void 0,2):s))}a(t,"log");import A from"https";import I from"url";var m="AWSCDK::CustomResourceProviderFramework::CREATE_FAILED",E="AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";async function d(o,e,s={}){let r={Status:o,Reason:s.reason||o,StackId:e.StackId,RequestId:e.RequestId,PhysicalResourceId:e.PhysicalResourceId||E,LogicalResourceId:e.LogicalResourceId,NoEcho:s.noEcho,Data:e.Data};t("submit response to cloudformation",r);let n=JSON.stringify(r),l=I.parse(e.ResponseURL);await f({hostname:l.hostname,path:l.path,method:"PUT",headers:{"content-type":"","content-length":n.length}},n)}a(d,"submitResponse");function R(o){return async e=>{if(e.RequestType==="Delete"&&e.PhysicalResourceId===m){t("ignoring DELETE event caused by a failed CREATE event"),await d("SUCCESS",e);return}try{await o(e)}catch(s){if(t(s),s instanceof u)throw t("retry requested by handler"),s;e.PhysicalResourceId||(e.RequestType==="Create"?(t("CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"),e.PhysicalResourceId=m):t(`ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(e)}`));let r=[s.message,`Logs: https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_GROUP_NAME)}/log-events/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_STREAM_NAME)}`].join(`
`);await d("FAILED",e,{reason:r})}}}a(R,"safeHandler");var u=class extends Error{};a(u,"Retry");async function f(o,e){return new Promise((s,r)=>{try{let n=A.request(o,s);n.on("error",r),n.write(e),n.end()}catch(n){r(n)}})}a(f,"httpRequest");var C=w(import.meta.url),h=C("aws-sdk");h.config.logger=console;var c=new h.Lambda({region:"us-east-1"}),p="live",U=R(async o=>{t("onEventHandler",o);let e,s,r=o.ResourceProperties.FunctionArn,n=r.split(":").pop();switch(o.RequestType){case"Create":{let i=(await F(n)).Version;await L(n,i),e=`${r}:${i}`,s={Version:i};break}case"Update":{e=o.PhysicalResourceId,s={Version:o.PhysicalResourceId.split(":").pop()};break}case"Delete":{await V(n),e=o.PhysicalResourceId;break}default:throw new Error("Unsupported request type")}return d("SUCCESS",{...o,PhysicalResourceId:e,Data:s})});async function F(o){t("createVersion() called with functionName",o);let e=await c.publishVersion({FunctionName:o}).promise();return t("response",e),{Version:e.Version}}a(F,"createVersion");async function L(o,e){t("createAlias() called with functionName",o,"version",e);let s;try{t("updateAlias"),s=await c.updateAlias({Name:p,FunctionName:o,FunctionVersion:e}).promise(),t("response",s)}catch(r){if(r.code==="ResourceNotFoundException"&&r.message.startsWith("Alias not found")){t("updateAlias"),s=await c.createAlias({Name:p,FunctionName:o,FunctionVersion:e}).promise(),t("response",s);return}throw r}}a(L,"createAlias");async function V(o){t("deleteOldVersions() called with functionName",o);let e;try{e=await c.getAlias({FunctionName:o,Name:p}).promise(),t("getAlias",e);let s=e.FunctionVersion;e=await c.listVersionsByFunction({FunctionName:o,MaxItems:50}).promise(),t("listVersionsByFunction",e);let r=e.Versions||[];for(let n=0,l=r.length;n<l;n++){let i=r[n].Version;if(i===s){t("deleteVersion",i,"skipped");continue}try{t("deleteVersion",i,"do"),e=await c.deleteFunction({FunctionName:o,Qualifier:i}).promise(),t("response",e)}catch(g){t("deleteVersion error",g)}}}catch(s){t("deleteOldVersions error",s)}}a(V,"deleteOldVersions");export{U as handler};
