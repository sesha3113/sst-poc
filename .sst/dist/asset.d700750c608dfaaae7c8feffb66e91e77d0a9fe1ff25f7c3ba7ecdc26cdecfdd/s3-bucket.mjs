import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var R=Object.defineProperty;var a=(t,e)=>R(t,"name",{value:e,configurable:!0});import{createRequire as A}from"module";function r(t,...e){console.log("[provider-framework]",t,...e.map(o=>typeof o=="object"?JSON.stringify(o,void 0,2):o))}a(r,"log");import y from"https";import E from"url";var p="AWSCDK::CustomResourceProviderFramework::CREATE_FAILED",f="AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";async function u(t,e,o={}){let n={Status:t,Reason:o.reason||t,StackId:e.StackId,RequestId:e.RequestId,PhysicalResourceId:e.PhysicalResourceId||f,LogicalResourceId:e.LogicalResourceId,NoEcho:o.noEcho,Data:e.Data};r("submit response to cloudformation",n);let s=JSON.stringify(n),c=E.parse(e.ResponseURL);await I({hostname:c.hostname,path:c.path,method:"PUT",headers:{"content-type":"","content-length":s.length}},s)}a(u,"submitResponse");function m(t){return async e=>{if(e.RequestType==="Delete"&&e.PhysicalResourceId===p){r("ignoring DELETE event caused by a failed CREATE event"),await u("SUCCESS",e);return}try{await t(e)}catch(o){if(r(o),o instanceof i)throw r("retry requested by handler"),o;e.PhysicalResourceId||(e.RequestType==="Create"?(r("CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"),e.PhysicalResourceId=p):r(`ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(e)}`));let n=[o.message,`Logs: https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_GROUP_NAME)}/log-events/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_STREAM_NAME)}`].join(`
`);await u("FAILED",e,{reason:n})}}}a(m,"safeHandler");var i=class extends Error{};a(i,"Retry");async function I(t,e){return new Promise((o,n)=>{try{let s=y.request(t,o);s.on("error",n),s.write(e),s.end()}catch(s){n(s)}})}a(I,"httpRequest");var C=A(import.meta.url),h=C("aws-sdk");h.config.logger=console;var l=new h.S3({region:"us-east-1"}),q=m(async t=>{r("onEventHandler",t);let e=t.RequestType==="Create"?L(t.ResourceProperties.BucketNamePrefix):t.PhysicalResourceId,o;switch(t.RequestType){case"Create":await w(e),o={BucketName:e};break;case"Update":break;case"Delete":await g(e),await k(e);break;default:throw new Error("Unsupported request type")}return u("SUCCESS",{...t,PhysicalResourceId:e,Data:o})});async function w(t){r("createBucket() called with bucketName",t);let e=await l.createBucket({Bucket:t}).promise();r("response",e)}a(w,"createBucket");async function k(t){r("deleteBucket() called with bucketName",t);let e=await l.deleteBucket({Bucket:t}).promise();r("response",e)}a(k,"deleteBucket");function L(t){let n="abcdefghijklmnopqrstuvwxyz",s=n.length,c=`${t.toLowerCase().slice(0,63-20-1)}-`;for(let d=0;d<20;d++)c+=n.charAt(Math.floor(Math.random()*s));return c}a(L,"generateBucketName");async function g(t){let e=await l.listObjectVersions({Bucket:t}).promise(),o=[...e.Versions??[],...e.DeleteMarkers??[]];if(o.length===0)return;let n=o.map(s=>({Key:s.Key,VersionId:s.VersionId}));await l.deleteObjects({Bucket:t,Delete:{Objects:n}}).promise(),e?.IsTruncated&&await g(t)}a(g,"emptyBucket");export{q as handler};
