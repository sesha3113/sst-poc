import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var E=Object.defineProperty;var r=(e,o)=>E(e,"name",{value:o,configurable:!0});import{createRequire as I}from"module";function n(e,...o){console.log("[provider-framework]",e,...o.map(t=>typeof t=="object"?JSON.stringify(t,void 0,2):t))}r(n,"log");import f from"https";import S from"url";var y="AWSCDK::CustomResourceProviderFramework::CREATE_FAILED",w="AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";async function d(e,o,t={}){let s={Status:e,Reason:t.reason||e,StackId:o.StackId,RequestId:o.RequestId,PhysicalResourceId:o.PhysicalResourceId||w,LogicalResourceId:o.LogicalResourceId,NoEcho:t.noEcho,Data:o.Data};n("submit response to cloudformation",s);let a=JSON.stringify(s),i=S.parse(o.ResponseURL);await A({hostname:i.hostname,path:i.path,method:"PUT",headers:{"content-type":"","content-length":a.length}},a)}r(d,"submitResponse");function g(e){return async o=>{if(o.RequestType==="Delete"&&o.PhysicalResourceId===y){n("ignoring DELETE event caused by a failed CREATE event"),await d("SUCCESS",o);return}try{await e(o)}catch(t){if(n(t),t instanceof u)throw n("retry requested by handler"),t;o.PhysicalResourceId||(o.RequestType==="Create"?(n("CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"),o.PhysicalResourceId=y):n(`ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(o)}`));let s=[t.message,`Logs: https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_GROUP_NAME)}/log-events/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_STREAM_NAME)}`].join(`
`);await d("FAILED",o,{reason:s})}}}r(g,"safeHandler");var u=class extends Error{};r(u,"Retry");async function A(e,o){return new Promise((t,s)=>{try{let a=f.request(e,t);a.on("error",s),a.write(o),a.end()}catch(a){s(a)}})}r(A,"httpRequest");var P=I(import.meta.url),p=P("aws-sdk");p.config.logger=console;var L=new p.S3({region:"us-east-1"}),l=new p.Lambda({region:"us-east-1"}),K=g(async e=>{n("onEventHandler",e);let o=e.RequestType==="Create"?_(e.ResourceProperties.FunctionNamePrefix):e.PhysicalResourceId.split(":").pop(),t,s,a=e.ResourceProperties.FunctionBucket,i=e.ResourceProperties.FunctionParams;switch(e.RequestType){case"Create":{await h(a,i);let c=await b(o,i);t=c.FunctionArn,s={FunctionArn:c.FunctionArn};break}case"Update":{let c=e.OldResourceProperties.FunctionParams;k(i,c)&&await m(o,i),x(i,c)&&(await h(a,i),await R(o,i)),t=e.PhysicalResourceId,s={FunctionArn:e.PhysicalResourceId};break}case"Delete":{await T(o);break}default:throw new Error("Unsupported request type")}return d("SUCCESS",{...e,PhysicalResourceId:t,Data:s})});function _(e){let s="abcdefghijklmnopqrstuvwxyz",a=s.length,i=`${e.toLowerCase().slice(0,64-20-1)}-`;for(let c=0;c<20;c++)i+=s.charAt(Math.floor(Math.random()*a));return i}r(_,"generateFunctionName");async function h(e,o){n("copyAsset() called with params",e,o),n("copy");let t=await L.copyObject({Bucket:e,CopySource:`/${o.Code.S3Bucket}/${o.Code.S3Key}`,Key:o.Code.S3Key}).promise();n("response",t),o.Code.S3Bucket=e}r(h,"copyAsset");async function b(e,o){n("createFunction() called with params",o);let t=await l.createFunction({...o,FunctionName:e}).promise();return n("response",t),{FunctionArn:t.FunctionArn}}r(b,"createFunction");async function m(e,o){n("updateFunctionConfiguration() called with params",o);try{let t=await l.updateFunctionConfiguration({FunctionName:e,...o,Code:void 0}).promise();n("response",t);return}catch(t){if(C(t)){await m(e,o);return}throw t}}r(m,"updateFunctionConfiguration");async function R(e,o){n("updateFunctionCode() called with params",o);try{let t=await l.updateFunctionCode({FunctionName:e,Publish:!1,...o.Code}).promise();n("response",t);return}catch(t){if(C(t)){await R(e,o);return}throw t}}r(R,"updateFunctionCode");async function T(e){n("deleteFunction() called with functionName",e);let o=await l.deleteFunction({FunctionName:e}).promise();n("response",o)}r(T,"deleteFunction");function k(e,o){return Object.keys(e).length!==Object.keys(e).length||["Description","Handler","Runtime","MemorySize","Timeout","Role"].some(t=>e[t]!==o[t])}r(k,"isConfigurationChanged");function x(e,o){return e.Code.S3Bucket!==o.Code.S3Bucket||e.Code.S3Key!==o.Code.S3Key}r(x,"isCodeChanged");function C(e){return e.code==="ThrottlingException"&&e.message==="Rate exceeded"||e.code==="Throttling"&&e.message==="Rate exceeded"||e.code==="TooManyRequestsException"&&e.message==="Too Many Requests"||e.code==="TooManyUpdates"||e.code==="OperationAbortedException"||e.code==="TimeoutError"||e.code==="NetworkingError"||e.code==="ResourceConflictException"}r(C,"isRetryableException");export{K as handler};
